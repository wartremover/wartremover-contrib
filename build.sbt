import ReleaseTransformations._

Global / onChangedBuildSource := ReloadOnSourceChanges

val wartremoverVersion = "2.4.10"

val scala211Versions = Seq("2.11.12")
val scala212Versions = Seq("2.12.10", "2.12.11", "2.12.12")
val scala213Versions = Seq("2.13.0", "2.13.1", "2.13.2", "2.13.3")

def latest(versions: Seq[String]) = {
  val prefix = versions.head.split('.').init.mkString("", ".", ".")
  assert(versions.forall(_ startsWith prefix))
  prefix + versions.map(_.drop(prefix.length).toLong).max
}

val scala211Latest = latest(scala211Versions)
val scala212Latest = latest(scala212Versions)
val scala213Latest = latest(scala213Versions)

lazy val commonSettings = Seq(
  organization := "org.wartremover",
  licenses := Seq(
    "The Apache Software License, Version 2.0" ->
      url("http://www.apache.org/licenses/LICENSE-2.0.txt")
  ),
  scalacOptions ++= Seq(
    "-deprecation"
  ),
  publishMavenStyle := true,
  publishArtifact in Test := false,
  publishTo := sonatypePublishToBundle.value,
  homepage := Some(url("https://www.wartremover.org")),
  pomExtra :=
    <scm>
      <url>git@github.com:wartremover/wartremover-contrib.git</url>
      <connection>scm:git:git@github.com:wartremover/wartremover-contrib.git</connection>
    </scm>
    <developers>
      <developer>
        <name>Chris Neveu</name>
        <url>http://chrisneveu.com</url>
      </developer>
    </developers>,
  scalaVersion := scala212Latest,
)

commonSettings
publishArtifact := false
releaseCrossBuild := true
releaseProcess := Seq[ReleaseStep](
  checkSnapshotDependencies,
  inquireVersions,
  setReleaseVersion,
  commitReleaseVersion,
  tagRelease,
  releaseStepCommandAndRemaining("+publishSigned"),
  releaseStepCommand("sonatypeBundleRelease"),
  setNextVersion,
  commitNextVersion,
  pushChanges
)

lazy val coreSettings = Def.settings(
  commonSettings,
  name := "wartremover-contrib",
  libraryDependencies ++= Seq(
    "org.scalatest" %% "scalatest" % "3.2.0" % Test
  )
)

lazy val coreBinary = project.in(file("core")).settings(
  coreSettings,
  crossScalaVersions := Seq(scala211Latest, scala212Latest, scala213Latest),
  crossVersion := CrossVersion.binary,
  libraryDependencies ++= Seq(
    "org.wartremover" %% "wartremover" % wartremoverVersion cross CrossVersion.binary
  ),
)

lazy val coreFull = project.in(file("core-full")).settings(
  coreSettings,
  crossScalaVersions := Seq(scala211Versions, scala212Versions, scala213Versions).flatten,
  Compile / scalaSource := (coreBinary / Compile / scalaSource).value,
  crossVersion := CrossVersion.full,
  crossTarget := {
    // workaround for https://github.com/sbt/sbt/issues/5097
    target.value / s"scala-${scalaVersion.value}"
  },
  libraryDependencies ++= Seq(
    "org.wartremover" %% "wartremover" % wartremoverVersion cross CrossVersion.full
  ),
)

lazy val sbtPlug: Project = Project(
  id = "sbt-plugin",
  base = file("sbt-plugin")
).settings(
  commonSettings,
  sbtPlugin := true,
  // Don't update to sbt 1.3.x
  // https://github.com/sbt/sbt/issues/5049
  sbtVersion := "1.2.8",
  name := "sbt-wartremover-contrib",
  scriptedBufferLog := false,
  scriptedLaunchOpts ++= {
    val javaVmArgs = {
      import scala.collection.JavaConverters._
      java.lang.management.ManagementFactory.getRuntimeMXBean.getInputArguments.asScala.toList
    }
    javaVmArgs.filter(
      a => Seq("-Xmx", "-Xms", "-XX", "-Dsbt.log.noformat").exists(a.startsWith)
    )
  },
  scriptedLaunchOpts += ("-Dplugin.version=" + version.value),
  crossScalaVersions := Seq(scala212Latest),
  addSbtPlugin("org.wartremover" %% "sbt-wartremover" % wartremoverVersion),
  sourceGenerators in Compile += Def.task {
    val base = (sourceManaged in Compile).value
    val file = base / "wartremover" / "contrib" / "Wart.scala"
    val wartsDir = coreBinary.base / "src" / "main" / "scala" / "wartremover" / "contrib" / "warts"
    val warts: Seq[String] = wartsDir
      .listFiles
      .withFilter(f => f.getName.endsWith(".scala") && f.isFile)
      .map(_.getName.replaceAll("""\.scala$""", ""))
      .sorted
    val content =
      s"""package wartremover.contrib
         |import wartremover.Wart
         |// Autogenerated code, see build.sbt.
         |object ContribWart {
         |  val ContribVersion$$ = "${version.value}"
         |  lazy val All: collection.Seq[Wart] = List(${warts mkString ", "})
         |  def allBut(ws: Wart*): collection.Seq[Wart] = All.filterNot(w => ws.exists(_.clazz == w.clazz))
         |  private[wartremover] lazy val ContribWarts = List(${warts mkString ", "})
         |  /** A fully-qualified class name of a custom Wart implementing `org.wartremover.WartTraverser`. */
         |  private[this] def w(nm: String): Wart = new Wart(s"org.wartremover.contrib.warts.$$nm")
         |""".stripMargin +
        warts.map(w => s"""  val $w = w("${w}")""").mkString("\n") + "\n}\n"
    IO.write(file, content)
    Seq(file)
  }
).enablePlugins(ScriptedPlugin)
